#
# FISH GLOBALS & ALIASES
#
# Fish saves a compiled version of these commands on execution so they only
# need to be called once initially and again after this file is updated.
#

# update completions
fish_update_completions

# remove universal variables to start afresh -- NOTE: This is destructive!
mv "$HOME"/.config/fish/fish_variables "$HOME"/.config/fish/fish_variables-(date --iso-8601=minutes).bak
# set arbitrary var to initialise `fish_variables` file
set -U fish_user_paths

# disable welcome message
set -U fish_greeting

# theme
set -U fish_color_autosuggestion 555 brblack
set -U fish_color_cancel -r
set -U fish_color_command --bold
set -U fish_color_comment red
set -U fish_color_cwd green
set -U fish_color_cwd_root red
set -U fish_color_end brmagenta
set -U fish_color_error brred
set -U fish_color_escape bryellow --bold
set -U fish_color_history_current --bold
set -U fish_color_host normal
set -U fish_color_match --background=brblue
set -U fish_color_normal normal
set -U fish_color_operator bryellow
set -U fish_color_param cyan
set -U fish_color_quote yellow
set -U fish_color_redirection brblue
set -U fish_color_search_match bryellow --background=brblack
set -U fish_color_selection white --bold --background=brblack
set -U fish_color_status red
set -U fish_color_user brgreen
set -U fish_color_valid_path --underline
set -U fish_pager_color_completion \x1d
set -U fish_pager_color_description B3A06D yellow
set -U fish_pager_color_prefix white --bold --underline
set -U fish_pager_color_progress brwhite --background=cyan

print_fish_colors

# VIM = <3
set -Ux EDITOR vim
set -Ux VISUAL vim
set -Ux GIT_EDITOR 'vim +startinsert'

# Use local chrome instead of downloading every time
set -Ux PUPPETEER_SKIP_CHROMIUM_DOWNLOAD 1
set -Ux PUPPETEER_EXECUTABLE_PATH (type -p google-chrome-unstable)

{{- if eq .chezmoi.os "darwin" }}
# macOS
set -U fish_user_paths (brew --prefix coreutils)/libexec/gnubin $fish_user_paths
{{- end }}

# Google Cloud SDK
set gcloud_bin_path "$HOME"/.google-cloud-sdk/bin
if test -d $gcloud_bin_path
  set -U fish_user_paths $gcloud_bin_path $fish_user_paths
end

# Node.js
set node_bin_path "$HOME"/.config/yarn/global/node_modules/.bin
if test -d $node_bin_path
  set -U fish_user_paths $node_bin_path $fish_user_paths
  set -Ux NODE_PRESERVE_SYMLINKS 1
end

# Golang
set -Ux GOPATH "$HOME"/Projects/go
set go_bin_path "$GOPATH"/bin
if test -d $go_bin_path
  set -U fish_user_paths $go_bin_path $fish_user_paths
end

# Rust
set rust_bin_path "$HOME"/.cargo/bin
if test -d $rust_bin_path
  set -U fish_user_paths $rust_bin_path $fish_user_paths
end

# fisher plugins
set -U FZF_COMPLETE 2
set -U FZF_FIND_FILE_COMMAND "fd --type f . \$dir"
set -U FZF_LEGACY_KEYBINDINGS 0

# Misc
abbr --add C 'math' # CLI calculator
abbr --add get 'aria2c --dir ~/Downloads' # download via CLI
abbr --add ppp 'up_system; up_fish; up_yarn; up_gce; up_docker; up_git; up_hosts; up_flatpak' # run full system update
abbr --add p 'yaourt' # Arch Linux package manager
abbr --add f 'flatpak' # generic app image manager
abbr --add x 'chezmoi' # dotfiles manager
abbr --add xd 'chezmoi diff'
abbr --add xa 'chezmoi apply -v'
abbr --add xu 'chezmoi update -v'
abbr --add fu 'fish ~/.config/fish/oneshot-config.fish'
abbr --add hh 'history --merge'

# Common tool replacements
abbr --add vim nvim
abbr --add cat bat
abbr --add catt 'bat --plain'
abbr --add ls exa
abbr --add find fd
abbr --add grep rg
abbr --add rgi 'rg --no-ignore'
abbr --add fdi 'fd --hidden --no-ignore'

# System
abbr --add s 'sudo -i'
abbr --add man 'man -a'
abbr --add .. 'cd ..'
abbr --add ... 'cd ../..'
abbr --add .... 'cd ../../..'
abbr --add ..... 'cd ../../../..'
abbr --add ...... 'cd ../../../../..'
abbr --add ....... 'cd ../../../../../..'
abbr --add -- - 'cd --' # single dash to go back to previous dir
abbr --add cp 'cp -i'
abbr --add mv 'mv -i'
abbr --add l 'exa -lFa --group-directories-first'
abbr --add ll 'exa -lFa --bytes --group-directories-first'
abbr --add lll 'exa -lFa'
abbr --add ld 'exa --tree --only-dirs'
abbr --add dux 'du -hs | sort -h'
abbr --add dus 'du --block-size=MiB --max-depth=1 | sort -n'
abbr --add 755 'fd --type directory --hidden --exec chmod 755 {}'
abbr --add 644 'fd --type file --hidden --exclude \'*.sh\' --exec chmod 644 {}'
# also exclude all files with executable permissions
abbr --add 644e 'find -O3 . -type d -name .git -prune -o -type f ! -name "*.sh" ! -executable -exec chmod 644 {} \;'

# Sysadmin
abbr --add curl "curl -vv -H 'Cache-Control: no-cache'"
abbr --add gce 'while not gce-ssh; echo "retrying..."; sleep 3; end'
abbr --add scs 'sc status' # systemctl
abbr --add scr 'sc restart'
abbr --add getip 'curl icanhazip.com'
abbr --add kk 'kill_process'
abbr --add t 'terraform'
# remove broken symlinks in dir
abbr --add rmln 'find -L . -name . -o -type d -prune -o -type l -exec rm -rf {} \;'
# remove node_modules dirs recursively
abbr --add rmnm 'fd --type directory --hidden --no-ignore-vcs --exec rm -rf {} \; node_modules .'
# remove yarn-error.log files recursively
abbr --add rmye 'fd --type file --hidden --exec rm -rf {} \; yarn-error.log .'
# list open ports
abbr --add lsport 'sudo echo -n; and sudo ss -plant | fzy --lines=max'
# list open ports on BSD/macOS
abbr --add lsnet 'sudo lsof -iTCP -sTCP:LISTEN -n -P'
# debug bash script
abbr --add bashx 'env PS4="\$(if [[ \$? == 0 ]]; then echo \"\033[0;33mEXIT: \$? ✔\"; else echo \"\033[1;91mEXIT: \$? ❌\033[0;33m\"; fi)\n\nSTACK:\n\${BASH_SOURCE[0]}:\${LINENO}\n\${BASH_SOURCE[*]:1}\n\033[0m" bash -x'

# Net tools
abbr --add nt 'docker run -ti --rm --network=host --volume="$PWD":/data local/net-tools'
# abbr --add curl 'docker run -ti --rm --network=host --volume="$PWD":/data local/net-tools curl'
abbr --add drill 'docker run -ti --rm local/net-tools drill'
abbr --add htop 'docker run -ti --rm --pid=host --volume="$HOME"/.config/htop/htoprc:/root/.config/htop/htoprc local/net-tools htop'
abbr --add iperf 'docker run -ti --rm --network=host local/net-tools iperf'
abbr --add jq 'docker run -ti --rm --volume="$PWD":/data local/net-tools jq'
abbr --add mtr 'docker run -ti --rm local/net-tools mtr'
abbr --add nmap 'docker run -ti --rm --network=host --volume="$PWD":/data local/net-tools nmap'
abbr --add ncat 'docker run -ti --rm --network=host --volume="$PWD":/data local/net-tools ncat'
abbr --add nping 'docker run -ti --rm --network=host local/net-tools nping'
# abbr --add ssh 'docker run -ti --rm --network=host --volume="$HOME"/.ssh:/root/.ssh:ro --volume="$PWD":/data local/net-tools ssh'
# abbr --add sftp 'docker run -ti --rm --network=host --volume="$HOME"/.ssh:/root/.ssh:ro --volume="$PWD":/data local/net-tools sftp'
# abbr --add scp 'docker run -ti --rm --network=host --volume="$HOME"/.ssh:/root/.ssh:ro --volume="$PWD":/data local/net-tools scp'
abbr --add tcpdump 'docker run -ti --rm --network=host --volume="$PWD":/data local/net-tools tcpdump'
abbr --add whois 'docker run -ti --rm local/net-tools whois'

# Docker
abbr --add d 'docker'
abbr --add di 'docker images'
abbr --add drm 'docker system prune'
# show containers
abbr --add dps 'docker ps -a'
# monitor all containers
abbr --add ds 'docker stats (docker ps -q)'
# run interactively then remove
abbr --add dr 'docker run -ti --rm'
abbr --add drr 'docker run -ti --rm alpine:edge sh'
# pull image from the hub.docker.com
abbr --add dp 'docker pull'
# get latest container ID
abbr --add dl 'docker ps -l -q'
# get container IP
abbr --add dip "docker inspect --format '{{"{{"}} .NetworkSettings.IPAddress {{"}}"}}'"
# remove orphaned volumes
# abbr --add drmv 'docker volume ls -qf dangling=true | xargs -r docker volume rm'
# get shell in host via docker
abbr --add dnse 'docker run -it --rm --privileged --pid=host justincormack/nsenter1'

# K8s
abbr --add k 'kubectl'
abbr --add ka 'kubectl apply --dry-run -f'
abbr --add kx 'kubectl delete --dry-run -f'
abbr --add kg 'kubectl get'
abbr --add kgp 'kubectl get pods -o wide'
abbr --add kgs 'kubectl get services -o wide'
abbr --add kgd 'kubectl get deployments -o wide'
abbr --add kd 'kubectl describe'
abbr --add kdn 'kubectl describe nodes'
abbr --add kr 'kubectl rollout status deployments/'
abbr --add krs 'kubectl rollout status deployments/'
abbr --add krus 'kubectl rollout undo deployments/'
abbr --add ke 'kubectl exec'
abbr --add kp 'kubectl proxy'
abbr --add kpass 'kubectl -n kube-system describe secret (kubectl -n kube-system get secret | grep admin-user | awk \'{print $1}\')'
abbr --add h 'helm'
abbr --add hl 'helm ls --tls'
abbr --add hf 'helm fetch'
abbr --add hi 'helm install'
abbr --add i 'istioctl'
abbr --add ii 'istioctl kube-inject -f'

# Development
abbr --add uu 'yarn upgrade-interactive --latest'
abbr --add yy 'clr; y'
abbr --add yb 'yarn run build'
abbr --add yyb 'clr; yarn run build'
abbr --add yt 'yarn run lint; and yarn run test-ci'
abbr --add yyt 'clr; yarn run lint; and yarn run test-ci'
abbr --add ytt 'yarn run lint; and env yarn jest --coverage'
abbr --add yytt 'clr; yarn run lint; and env yarn jest --coverage'
abbr --add yr 'clr; yarn run _run'
abbr --add ys 'yarn run serve'
abbr --add yi 'yarn info'
abbr --add yii 'yit polka; yit preact; yit preact-cli; yit preact-router; yit preact-render-to-string; yit postcss-advanced-variables'
abbr --add tl 'travis lint ./.travis.yml'

# Git
abbr --add g 'git'
# edit all files with changes
abbr --add ge 'vim -p (git diff --name-only)'
abbr --add gs 'git status --short --branch --show-stash'
abbr --add gp 'git pull --prune'
# 1. Configure upstream remote - ref: https://help.github.com/articles/configuring-a-remote-for-a-fork/
# 2. Sync fork with upstream: run gpp - ref: https://help.github.com/articles/syncing-a-fork/
abbr --add gpp 'git fetch upstream; and git merge upstream/master master; and git push origin master'
abbr --add gl "git log --graph --pretty=format:'%C(yellow)%h%Creset%C(blue)%d%Creset %C(white bold)%s%Creset %C(white dim)(by %an %ar)%Creset'"
abbr --add gll 'git log --oneline -n 40'
abbr --add glll 'git log --graph --abbrev-commit --date=relative'
abbr --add ga 'git add'
abbr --add gd 'git diff'
abbr --add gdt 'git difftool'
abbr --add gdd 'git diff --staged'
# see changes in origin
abbr --add gpdo 'git diff master..origin/master'
# see changes in upstream
abbr --add gpdu 'git fetch upstream; git diff master..upstream/master'
# review changes from last pull
abbr --add gpd "git log --reverse --no-merges --stat '@{1}..'"
# see unpushed commits
abbr --add gout 'git log --stat "@{u}"..'
# see unpushed commits on all branches
abbr --add gouta 'git log --stat --branches --not --remotes'
# see unpulled commit
abbr --add gin 'git log --stat .."@{u}"'
abbr --add gc 'git commit --verbose'
abbr --add gca 'git commit --verbose --all'
abbr --add gg 'gchkout'
abbr --add gco 'git checkout' # better to use gg/gchkout function most of the time
abbr --add gb 'git branch'
abbr --add gm 'git merge'
abbr --add gt 'git tag'
# remove missing files
abbr --add grm 'git ls-files --deleted -z | xargs -0 git rm'
